/*
  This will make the red light blink and the fan turn on 
  Hardware Required:
  * LaunchPad with an LED
  
  This example code is in the public domain.
*/
#include <Wire.h> 
// most launchpads have a red LED
#define LED P1_3
#define BUZZER P2_6
#define CTL_FAN P1_0

/************ GET BATTERY LOGIC **********/
#define NOMINAL_CAPACITY 0x08
#define FULL_AVAILABILITY_CAPACITY 0x0A
#define REMAINING_CAPACITY 0x0C
#define FULL_CHARGE_CAPACITY 0x0E
#define AVERAGE_CURRENT 0x10
#define STANDBY_CURRENT 0x12
#define MAXLOAD_CURRENT 0x14
#define AVERAGE_POWER 0x18
#define STATE_OF_HEALTH 0x20
#define STATE_OF_CHARGE 0x1C
#define INTERNAL_TEMPERATURE 0x1E
#define REMAINING_CAPACITY_UNFILTERED 0x28
#define REMAINING_CAPACITY_FILTERED 0x2A
#define FULL_CHARGE_CAPACITY_UNFILTERED 0x2C
#define FULL_CHARGE_CAPACITY_FILTERED 0x2E
#define STATE_OF_CHARGE_UNFILTERED 0x30 
#define TRUE_REMAINING_CAPACITY 0x6A
/************************** GLOBAL VAR START ********************/

//see pins_energia.h for more LED definitions
//#define LED GREEN_LED
  
// the setup routine runs once when you press reset:
void setup() {                
  // initialize the digital pin as an output.
  pinMode(LED, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  pinMode(CTL_FAN, OUTPUT);
}

// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(LED, HIGH);   // turn the LED on (HIGH is the voltage level)
  analogWrite(CTL_FAN, 255);
  delay(1000);
  // wait for a second
 // analogWrite(CTL_FAN, 0);
  digitalWrite(LED, LOW);    // turn the LED off by making the voltage LOW
  delay(1000);               // wait for a second
}

/* Get Register from Fuel Gauge */
uint16_t Get_BatteryValue(uint8_t fuelregister)
{
	return Get_BatteryRegister(fuelregister);
}
void Beep(){
    analogWrite(BUZZER,500);
    delay(1000);
    analogWrite(BUZZER, 0);
    delay(1000);
}
uint16_t Get_BatteryRegister(uint8_t commandAddress)
{
    Wire.beginTransmission(0xAA); // transmit to device #44 (0x2c) Send Start Address
    Wire.write(byte(commandAddress));            // sends instruction byte
    Wire.write(0xAB);             // sends potentiometer value byte
    uint8_t lsb = Wire.read();
    uint8_t msb = Wire.read();
    uint16_t combined = msb << 8 | lsb;
    Wire.endTransmission();     // stop transmitting

    return combined;
}
